package fuellstand;

import java.awt.Color;
import java.awt.Graphics;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Klaus
 */
public class FuellstandPanel extends javax.swing.JPanel {

  private static final int TEXTHOEHE = 15;

  private Behaelter[] behaelter;

  /**
   * Creates new form FuellstandFrame
   */
  public FuellstandPanel(Behaelter[] behaelter) {
    this.behaelter = behaelter;
    initComponents();
    this.setVisible(true);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public void paintComponent(Graphics g) {
    super.paintComponent(g);
    int width = this.getWidth() / behaelter.length;
    int heigth = this.getHeight() - 50 - TEXTHOEHE;

    List<Integer> voll = new LinkedList<>();

    for (int i = 0; i < behaelter.length; i++) {
      Behaelter b = behaelter[i];

      if (b.isVoll()) {
        voll.add(i + 1);
      }

      int hFuellstand = (int) (heigth / b.getMax() * b.getFuellstand());
      g.setColor(b.getFarbe());
      g.fillRect(i * width, this.getHeight() - hFuellstand - TEXTHOEHE, width, hFuellstand);
      g.drawString((Math.round(b.getFuellstand() * 100) / 100d) + "", i * width, this.getHeight());
      g.setColor(Color.WHITE);

      int hWarnung = (int) (heigth / b.getMax() * b.getWarnung());
      g.drawLine(i * width, this.getHeight() - hWarnung, i * width + width, this.getHeight() - hWarnung);
    }

    if (!voll.isEmpty()) {
      StringBuilder sb = new StringBuilder("Behälter ");
      if (voll.size() == 1) {
        sb.append(voll.get(0));
        sb.append(" ist voll!");
      } else {
        for (Integer i : voll) {
          sb.append(i).append(" ");
        }
        sb.append("sind voll!");
      }
      g.setColor(Color.BLACK);
      g.drawString(sb.toString(), 50, 50);
    }
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
